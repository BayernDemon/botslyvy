import asyncio
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import FSInputFile, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.client.default import DefaultBotProperties
from datetime import datetime
from aiogram.types import Message
import os

API_TOKEN = '8351428999:AAF-P-0Lu5d3olDGIpRBKoXLhZ9jkZUSdno'
CHANNEL_URL = "https://t.me/+Z4Eqdz8K6o8yNDVi"
ADMIN_ID = 1938874314

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher(storage=MemoryStorage())

got_probnik = set()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def main_menu():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —Å–ª–∏–≤", callback_data="buy")],
        [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–±–Ω–∏–∫", callback_data="probnik")],
        [InlineKeyboardButton(text="üì¢ –ù–∞—à –∫–∞–Ω–∞–ª", url=CHANNEL_URL)],
        [InlineKeyboardButton(text="üí° –ü—Ä–µ–¥–ª–æ–∂–∫–∞", callback_data="offer")],
        [InlineKeyboardButton(text="üõ† –ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]

    ])

# –ù–∞–∑–∞–¥
def back_button():
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or "NoUsername"
    name = message.from_user.first_name or "NoName"

    with open("users.txt", "a", encoding="utf-8") as f:
        f.write(f"{username} | {user_id}\n")

    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {name}!\n\n"
        "üì∏ –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ c —Å–ª–∏–≤–∞–º–∏: –ü–∞—Ä–∞–¥–æ–∫—Å–∏, –ò–Ω—Å—Ç–∞—Å–∞–º–∫–∏, –•–æ—Ñ–º–∞–Ω–∏—Ç—ã.\n"
        "üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å!",
        reply_markup=main_menu()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ö—É–ø–∏—Ç—å —Å–ª–∏–≤"
@dp.callback_query(F.data == "buy")
async def send_buy(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "üí≥ –í—ã–±–µ—Ä–∏ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã 200 –≥—Ä–Ω / 500 —Ä—É–± / 5 USDT:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üí∏ DonationAlerts", url="https://www.donationalerts.com/r/genetika52")],
            [InlineKeyboardButton(text="ü™ô TON (–∫—Ä–∏–ø—Ç–∞)", callback_data="pay_ton")],
            [InlineKeyboardButton(text="ü™ô USDT (–∫—Ä–∏–ø—Ç–∞)", callback_data="pay_usdt")],
            [InlineKeyboardButton(text="üßæ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è", callback_data="pay_info")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
        ])
    )

# –û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ TON
@dp.callback_query(F.data == "pay_ton")
async def send_ton(callback: types.CallbackQuery):
    await callback.message.delete()

    ton_address = "UQBJfMNwZw6C6r_yB_3odEqh1Q4plxZ8idGF1HlcSWBgOB4G"
    qr_url = f"https://tonhub.com/transfer/{ton_address}"

    await callback.message.answer(
        f"ü™ô <b>TON (TRC20)</b>\n\n"
        f"<b>–ê–¥—Ä–µ—Å:</b>\n<code>{ton_address}</code>\n\n"
        f"üí° –û—Ç–ø—Ä–∞–≤—å –ª—é–±—É—é —Å—É–º–º—É –æ—Ç <b>5 USDT –≤ TON</b> –∏ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏ /check\n\n"
        f"<a href='{qr_url}'>üí≥ –û–ø–ª–∞—Ç–∏—Ç—å —á–µ—Ä–µ–∑ TON Hub</a>",
        reply_markup=back_button()
    )

@dp.callback_query(F.data == "pay_usdt")
async def send_usdt(callback: CallbackQuery):
    await callback.message.delete()

    usdt_address = "TH6wBmtu2rmnijnPG99AiyGATWLw75iPm1"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π –∞–¥—Ä–µ—Å USDT
    binance_url = "https://www.binance.com/ru-UA"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="usdt_paid")],
        [InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å —á–µ—Ä–µ–∑ Binance", url=binance_url)],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back")]
    ])

    await callback.message.answer(
        "**–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ USDT (TRC20)**\n\n"
        f"üí∏ –°—É–º–º–∞: `5 USDT`\n"
        f"üì¨ –ê–¥—Ä–µ—Å: `{usdt_address}`\n\n"
        "–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
        reply_markup=keyboard,
        parse_mode="Markdown"
    )


# –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ
@dp.callback_query(F.data == "pay_info")
async def pay_info(callback: types.CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "üìå <b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –æ–ø–ª–∞—Ç–µ</b>\n\n"
        "1. –í—ã–±–µ—Ä–∏ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã.\n"
        "2. –û—Ç–ø—Ä–∞–≤—å –æ–ø–ª–∞—Ç—É.\n"
        "3. –ù–∞–∂–º–∏ /check –∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω –∏–ª–∏ –Ω–∏–∫, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–ª–∞—Ç–∏–ª.\n\n"
        "–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –≤—ã—à–ª–µ–º –∞—Ä—Ö–∏–≤ üì¶",
        reply_markup=back_button()
    )



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.message(Command("check"))
async def check_payment(message: types.Message):
    await message.answer("üîç –ù–∞–ø–∏—à–∏ —Å—é–¥–∞, —á—Ç–æ —Ç—ã –æ–ø–ª–∞—Ç–∏–ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å —Å–∫—Ä–∏–Ω.\n–ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º –∞—Ä—Ö–∏–≤ üì¶")
    await bot.send_message(ADMIN_ID, f"üßæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{message.from_user.username or 'NoUsername'} ({message.from_user.id}) –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ–≤–µ—Ä–∫—É –æ–ø–ª–∞—Ç—ã.")

# –ü—Ä–æ–±–Ω–∏–∫
@dp.callback_query(F.data == "probnik")
async def send_probnik(callback: CallbackQuery):
    await callback.message.delete()
    user_id = callback.from_user.id

    if user_id in got_probnik:
        await callback.message.answer("‚ö†Ô∏è –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª –ø—Ä–æ–±–Ω–∏–∫. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—ã–π —Å–ª–∏–≤ ‚Äî –Ω–∞–∂–º–∏ ¬´–ö—É–ø–∏—Ç—å —Å–ª–∏–≤¬ª.", reply_markup=back_button())
    else:
        got_probnik.add(user_id)
        file = FSInputFile("files/probnik.jpg")
        await callback.message.answer_photo(file, caption="–í–æ—Ç –ø—Ä–æ–±–Ω–∏–∫ üòè\n–ü–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã üí∞", reply_markup=back_button())

# –ü—Ä–µ–¥–ª–æ–∂–∫–∞
@dp.callback_query(F.data == "offer")
async def handle_offer(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer("üí° –ù–∞–ø–∏—à–∏ —Å—é–¥–∞, –∫–æ–≥–æ —Ö–æ—á–µ—à—å –≤–∏–¥–µ—Ç—å –≤ —Å–ª–µ–¥—É—é—â–∏—Ö —Å–ª–∏–≤–∞—Ö. –ú—ã –≤—Å—ë —á–∏—Ç–∞–µ–º üëÄ", reply_markup=back_button())

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞
@dp.callback_query(F.data == "support")
async def support_info(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        "üõ† –ï—Å–ª–∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∏–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –Ω–∞–ø–∏—à–∏ —Å—é–¥–∞: @spb52nggFT\n\n"
        "–ú—ã —Å—Ç–∞—Ä–∞–µ–º—Å—è –æ—Ç–≤–µ—á–∞—Ç—å –±—ã—Å—Ç—Ä–æ üí¨",
        reply_markup=back_button()
    )

# –ù–∞–∑–∞–¥
@dp.callback_query(F.data == "back")
async def back_to_menu(callback: CallbackQuery):
    await callback.message.delete()
    await callback.message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {callback.from_user.first_name}!\n\n"
        "üì∏ –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–±–Ω–∏–∫ –∏–ª–∏ –∫—É–ø–∏—Ç—å –ø–æ–ª–Ω—ã–π –∞—Ä—Ö–∏–≤.\n"
        "üí¨ –¢–∞–∫–∂–µ –º–æ–∂–µ—à—å –æ—Å—Ç–∞–≤–∏—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏–µ –∫–æ–≥–æ –¥–æ–±–∞–≤–∏—Ç—å!",
        reply_markup=main_menu()
    )

# –û—Ç–ø—Ä–∞–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞ –≤—Ä—É—á–Ω—É—é (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@dp.message(Command("s_a3129"))
async def send_archive(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    file = FSInputFile("files/full_archive.zip")
    await message.answer_document(file, caption="üì¶ –í–æ—Ç —Ç–≤–æ–π –ø–æ–ª–Ω—ã–π —Å–ª–∏–≤. –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@dp.errors()
async def error_handler(update, exception):
    await bot.send_message(ADMIN_ID, f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{exception}")
    return True

# –ó–∞–ø—É—Å–∫
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
